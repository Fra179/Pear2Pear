name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fra179/pear2pear-signaling

jobs:
  build-website:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: 'null'
          package_json_file: 'website/package.json'

      - name: Install dependencies
        run: pnpm install
        working-directory: website

      - name: Build project
        run: pnpm build
        working-directory: website

      - name: Prepare files for release
        run: |
          mkdir -p release
          cp -r website/* release/ && cd release
          rm -rf node_modules src *.json *.yaml
          cd .. && chmod -R a+rX ./release

      - name: Upload pages artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: release/

      - name: Archive build artifacts
        run: |
          cd release && tar cvzf ../website-static.tar.gz *
          cd .. && rm -rf release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: website-static.tar.gz

  deploy-website:
    needs: build-website
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-go:
    strategy:
      matrix:
        goos:
          - os: linux
            extension: ""
          - os: windows
            extension: ".exe"
          - os: darwin
            extension: ""
        goarch: [ amd64, arm64 ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Build project
        run: GOOS=${{ matrix.goos.os }} GOARCH=${{ matrix.goarch }} go build -o ../release/signaling-server-${{ matrix.goos.os }}-${{ matrix.goarch }}${{ matrix.goos.extension }} .
        working-directory: "signaling_server"

      - name: Archive build artifacts
        run: |
          tar cvzf signaling-server-${{ matrix.goos.os }}-${{ matrix.goarch }}.tar.gz signaling-server-${{ matrix.goos.os }}-${{ matrix.goarch }}${{ matrix.goos.extension }}
          rm signaling-server-${{ matrix.goos.os }}-${{ matrix.goarch }}${{ matrix.goos.extension }}
        working-directory: release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/signaling-server-${{ matrix.goos.os }}-${{ matrix.goarch }}.tar.gz

  build-docker:
    name: Build docker image for Backend
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to github registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        id: docker_build
        with:
          context: "{{defaultContext}}:signaling_server"
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.docker_build.outputs.digest }}
          push-to-registry: 'true'